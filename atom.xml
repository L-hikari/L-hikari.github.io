<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mafumafu</title>
  
  <subtitle>tianliang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wangtianliang.cn/"/>
  <updated>2019-01-09T12:33:23.526Z</updated>
  <id>http://www.wangtianliang.cn/</id>
  
  <author>
    <name>wangtianliang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS实现十种排序算法</title>
    <link href="http://www.wangtianliang.cn/2018/12/25/JS%E5%AE%9E%E7%8E%B0%E5%8D%81%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://www.wangtianliang.cn/2018/12/25/JS实现十种排序算法/</id>
    <published>2018-12-25T07:19:11.000Z</published>
    <updated>2019-01-09T12:33:23.526Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><blockquote><p>排序算法，就是如何使得记录按照要求排列的方法。排序算法在很多领域得到相当地重视，尤其是在大量数据的处理方面。一个优秀的算法可以节省大量的资源。在各个领域中考虑到数据的各种限制和规范，要得到一个符合实际的优秀算法，得经过大量的推理和分析。</p></blockquote><a id="more"></a><h2 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h2><p>排序算法分是有稳定性，通俗地讲就是能保证排序前2个相等的数其在序列的前后位置顺序和排序后它们两个的前后位置顺序相同。在简单形式化一下，如果Ai = Aj，Ai原来在位置前，排序后Ai还是要在Aj位置前。</p><p><strong>稳定的排序算法</strong></p><ul><li>冒泡排序</li><li>直接插入排序</li><li>归并排序</li><li>基数排序</li><li>计数排序</li></ul><p><strong>不稳定的排序算法</strong></p><ul><li>选择排序</li><li>快速排序</li><li>希尔排序</li><li>堆排序</li></ul><p>由于桶排序是将各个桶分别使用其他排序方法排序所以不好说明其稳定性</p><h2 id="冒泡排序-Bubble-Sort"><a href="#冒泡排序-Bubble-Sort" class="headerlink" title="冒泡排序(Bubble Sort)"></a>冒泡排序(Bubble Sort)</h2><p>作为最简单的排序算法之一，冒泡排序给我的感觉就像Abandon在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。。。冒泡排序还有一种优化算法，就是立一个flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序-Selection-sort"><a href="#选择排序-Selection-sort" class="headerlink" title="选择排序(Selection sort)"></a>选择排序(Selection sort)</h2><p>选择排序是一中简单直观的排序算法，它的工作原理是每一次从待排序的数据元素中选出最小(或最大)的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。选择排序是不稳定的排序算法，它会重复交换位置。</p><p><strong>选择排序思路</strong></p><ul><li>假设第一个元素为最小元素，记下下标</li><li>寻找右侧剩余元素，如果有更小的，重新记下最新下标</li><li>如果有新的最小的，交换两个元素</li><li>往右重复以上步骤，直到元素本身是最后一个</li></ul><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//假设当前值是最小值记录索引</span></span><br><span class="line">        <span class="keyword">var</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果min不等于i说明最小值已经被改变，那么将当前值和真正最小值交换</span></span><br><span class="line">        <span class="keyword">if</span> (min != i) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[min];</span><br><span class="line">            arr[min] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="插入排序-Insert-sort"><a href="#插入排序-Insert-sort" class="headerlink" title="插入排序(Insert sort)"></a>插入排序(Insert sort)</h2><p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的，个数加一的有序数据，这种算法适用于少量数据的排序，是稳定的排序方法。插入算法要把排序的分成两部分，第一部分包含了这个数组的所有元素，但将最后一个元素除外，（让数组多一个空间才有插入的位置）。而第二部分就只包含一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。</p><p>插入排序的基本思想：每一步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件适当位置上，直到全部插入完为止。</p><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p><strong>插入排序思路</strong></p><ul><li>设置监视哨 r[0]，将待插入的纪录的值赋给 r[0]</li><li>设置开始查找的位置 J</li><li>在数组中进行搜索，搜索中将第 J 个记录后移，直至 r[0] .key &gt;= r[J].key为止</li><li>将r[0] 插入 r[J + 1] 的位置上</li></ul><p><strong>步骤</strong></p><ol><li>认定第一个元素已经排好序</li><li>取出第二个元素，作为待插入数据</li><li>与已经排好序的数组的最右侧元素开始进行比较</li><li>如果后面的小于前面的，说明前面已经排好序的那个数组元素不在对的位置（向后移一个）然后让新的元素填充进去，继续向前比较</li><li>重复前面的步骤，直到当前元素插入到对的位置</li><li>重复以上步骤，直到数组的所有元素都插入到对的位置</li></ol><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//假设第一个已经排好序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">        <span class="comment">//向前寻找如果有比排好序的还大的值，说明前面没有排好序，那么就交换值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; temp) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环结束说明前面顺序已经交换完成，将值插入到指定位置</span></span><br><span class="line">        arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分插入排序"><a href="#二分插入排序" class="headerlink" title="二分插入排序"></a>二分插入排序</h3><p>二分插入排序是利用二分法的原理，在已经排序的元素序列中二分查找到第一个比它大的数的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">4</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binaryInsertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//确定要插入的值和左右指针</span></span><br><span class="line">        <span class="keyword">var</span> temp = arr[i],</span><br><span class="line">            left = <span class="number">0</span>,</span><br><span class="line">            right = i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//在前面排好序的数据中利用二分法查找比要插入的值还要大的值</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">var</span> m = <span class="built_in">Math</span>.floor((right + left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; arr[m]) &#123;</span><br><span class="line">                left = m + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                right = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//确认要插入的位置后，将值插入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i - <span class="number">1</span>; j &gt;= left; j--) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[left] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(binaryInsertSort(arr));</span><br></pre></td></tr></table></figure><h2 id="快速排序-Quick-sort"><a href="#快速排序-Quick-sort" class="headerlink" title="快速排序(Quick sort)"></a>快速排序(Quick sort)</h2><p>快速排序是对冒泡排序的一种改进。通过一趟排序将要排序的数据分割成两部分，其中一部分的所有数据都比另外一部分的所有数据要小，然后在按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据编程有序数列。</p><p>设要排序的数组为 A[0]……A[n-1]，首先任意选取一个数据（通常选取数组的第一个数）作为关键数据，然后将所有比它小的数据都放到它前面，所有比它大的数据都放到它后面，这个过程称为一趟快速排序。</p><p>值得注意的是：快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也会在算法结束时产生变动</p><p><strong>快排思路</strong></p><ul><li>从数组中选出一个元素（通常选取数组的第一个数）作为参照对象</li><li>定义两个数组，将目标数组中剩余的元素与参照元素挨个比较；小的放到一个数组，大的放到另一个数组</li><li>第二步执行完毕之后，前后的数组顺序不定，但是确定了自己的位置</li><li>将得到的小数组按照第一到第三部重复操作</li><li>回溯最小数组（一个元素）</li></ul><p><strong>代码演示</strong></p><h3 id="基本快排实现"><a href="#基本快排实现" class="headerlink" title="基本快排实现"></a>基本快排实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果数组的长度小于1的话则返回这个数组</span></span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">    <span class="keyword">var</span> left = [], right = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//如果当前元素比基准值小放到左边数组，否则放到右边数组</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[<span class="number">0</span>]) &#123;</span><br><span class="line">            left.push(arr[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            right.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat(arr[<span class="number">0</span>], quickSort(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(arr))</span><br></pre></td></tr></table></figure><h3 id="不使用数组方法实现快排"><a href="#不使用数组方法实现快排" class="headerlink" title="不使用数组方法实现快排"></a>不使用数组方法实现快排</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//确定左右指针</span></span><br><span class="line">    <span class="keyword">var</span> partitionIndex,</span><br><span class="line">        left = <span class="keyword">typeof</span> left != <span class="string">'number'</span> ? <span class="number">0</span> : left,</span><br><span class="line">        right = <span class="keyword">typeof</span> right != <span class="string">'number'</span> ? arr.length - <span class="number">1</span> : right;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        partitionIndex = partition(arr, left, right);</span><br><span class="line">        quickSort(arr, left, partitionIndex - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr, partitionIndex + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数组以基准值进行分割</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = left + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[left]) &#123;</span><br><span class="line">            swap(arr, i, index);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, left, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> index - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换两个变量的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不使用递归实现快排"><a href="#不使用递归实现快排" class="headerlink" title="不使用递归实现快排"></a>不使用递归实现快排</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//模拟递归入栈</span></span><br><span class="line">    <span class="keyword">var</span> list = [[left, right]];</span><br><span class="line">    <span class="keyword">while</span> (list.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//模拟出栈不断取最后一个值</span></span><br><span class="line">        <span class="keyword">var</span> now = list.pop();</span><br><span class="line">        <span class="keyword">if</span> (now[<span class="number">0</span>] &gt;= now[<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">var</span> i = now[<span class="number">0</span>], j = now[<span class="number">1</span>], flag = now[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//如果左右指针相遇退出循环</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="comment">//不断缩小右指针寻找第一个比基准值小的值</span></span><br><span class="line">            <span class="keyword">while</span> (arr[j] &gt;= arr[flag] &amp;&amp; j &gt; flag) j--;</span><br><span class="line">            <span class="comment">//如果右指针缩小到与左指针重合退出循环</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//不断推进左指针寻找第一个比基准值大的值</span></span><br><span class="line">            <span class="keyword">while</span> (arr[i] &lt;= arr[flag] &amp;&amp; i &lt; j) i++;</span><br><span class="line">            <span class="comment">//当确认比基准值大的值和比基准值小的值后，交换三者位置</span></span><br><span class="line">            <span class="keyword">var</span> tmp = arr[flag];</span><br><span class="line">            arr[flag] = arr[j];</span><br><span class="line">            arr[j] = arr[i];</span><br><span class="line">            arr[i] = tmp</span><br><span class="line">            flag = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟压栈将以基准分隔好的数组压入栈中</span></span><br><span class="line">        list.push([now[<span class="number">0</span>], flag - <span class="number">1</span>]);</span><br><span class="line">        list.push([flag + <span class="number">1</span>, now[<span class="number">1</span>]])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序-Merge-sort"><a href="#归并排序-Merge-sort" class="headerlink" title="归并排序(Merge sort)"></a>归并排序(Merge sort)</h2><p>归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法的一个非常典型的应用，将已有序的子序列合并，得到完全有序的序列，即先使每个子序列有序，再使子序列段间有序。若将两个直接有序表合并成一个有序表，称为二路归并</p><p><strong>二路归并</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [];</span><br><span class="line"><span class="comment">//如果arr1和arr2的长度有一个为0结束循环</span></span><br><span class="line"><span class="keyword">while</span> (arr1.length &amp;&amp; arr2.length) &#123;</span><br><span class="line">    <span class="comment">//将小的元素添加到新数组</span></span><br><span class="line">    <span class="keyword">var</span> str = arr1[<span class="number">0</span>] &lt; arr2[<span class="number">0</span>] ? arr1.shift() : arr2.shift();</span><br><span class="line">    arr3.push(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr3.concat(arr1, arr2))</span><br></pre></td></tr></table></figure><p><strong>归并排序思路</strong></p><ol><li>将数组拆分成两个数组</li><li>重复步骤1将数组拆分成最小单元</li><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li><li>重复步骤3直到某一指针超出序列尾</li><li>将另一序列剩下的所有元素直接复制到合并序列尾</li></ol><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">4</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果数组长度小于等于1则返回该数组</span></span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">    <span class="comment">//将数组从中间分成左右数组</span></span><br><span class="line">    <span class="keyword">var</span> middle = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> left = arr.slice(<span class="number">0</span>, middle);</span><br><span class="line">    <span class="keyword">var</span> right = arr.slice(middle);</span><br><span class="line">    <span class="comment">//递归点</span></span><br><span class="line">    left = mergeSort(left);</span><br><span class="line">    right = mergeSort(right);</span><br><span class="line">    <span class="comment">//二路归并</span></span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = left[<span class="number">0</span>] &lt; right[<span class="number">0</span>] ? left.shift() : right.shift();</span><br><span class="line">        newArr.push(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr.concat(left, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mergeSort(arr))</span><br></pre></td></tr></table></figure><h2 id="希尔排序-Shell-sort"><a href="#希尔排序-Shell-sort" class="headerlink" title="希尔排序(Shell sort)"></a>希尔排序(Shell sort)</h2><p>希尔排序也称为“缩小增量排序”，其基本原理是，先将待排序的数组元素分成多个子序列，使得每个子序列的元素个数相对较少，然后对各个子序列分别进行直接插入排序，待整个待排序序列“基本有序”后，最后在对所有元素进行一次直接插入排序。</p><p><strong>希尔排序思路</strong></p><ul><li>指定步长</li><li>逐渐缩小步长</li><li>以步长进行直接插入排序</li></ul><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//动态获取步长</span></span><br><span class="line">    <span class="keyword">var</span> gap = <span class="number">1</span>, temp;</span><br><span class="line">    <span class="keyword">while</span> (gap &lt; arr.length / <span class="number">2</span>) &#123;</span><br><span class="line">        gap *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//逐渐缩小步长</span></span><br><span class="line">    <span class="keyword">for</span> (gap; gap &gt; <span class="number">0</span>; gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="comment">//以步长为单位进行直接插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap) &#123;</span><br><span class="line">                arr[j + gap] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数排序-Counting-Sort"><a href="#计数排序-Counting-Sort" class="headerlink" title="计数排序(Counting Sort)"></a>计数排序(Counting Sort)</h2><p>计数排序是一个非基于比较的排序算法</p><p><strong>计数排序思路</strong></p><ul><li>获取一个数组中的最大值</li><li>创建一个新数组其长度为原数组最大值 + 1</li><li>确定原数组每个元素在新数组中的位置</li><li>遍历新数组对原数组从新进行排序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">4</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countingSort</span>(<span class="params">arr, max</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//声明一个长度23且每一个元素都为空</span></span><br><span class="line">    <span class="keyword">var</span> bucket = <span class="keyword">new</span> <span class="built_in">Array</span>(max + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历原数组，让长度为23的数组指定位置有值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!bucket[arr[i]]) &#123;</span><br><span class="line">            bucket[arr[i]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bucket[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历长度为23的数组当遍历到有值的位置时，添加到原数组中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; bucket.length; j++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (bucket[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            arr[index++] = j;</span><br><span class="line">            bucket[j]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(countingSort(arr, <span class="number">22</span>))</span><br></pre></td></tr></table></figure><h2 id="桶排序-Bucket-Sort"><a href="#桶排序-Bucket-Sort" class="headerlink" title="桶排序(Bucket Sort)"></a>桶排序(Bucket Sort)</h2><p>桶排序是计数排序的升级版，将数组分到有限数量的桶子里。每个桶子再分别排序。</p><p><strong>桶排序思路</strong></p><ol><li>确定目标数组最大值和最小值</li><li>创建桶确定个数</li><li>将数据分别添加到各个桶中</li><li>再对每个桶进行排序</li><li>最后将排好序的桶合并为一个数组</li></ol><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bucketSort</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> min = arr[<span class="number">0</span>],max = arr[<span class="number">0</span>],i;</span><br><span class="line">    <span class="comment">//遍历目标数组得到最大值和最小值</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">        min = arr[i];    </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建大桶</span></span><br><span class="line">    <span class="keyword">var</span> size = size || <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">var</span> bucketCount = <span class="built_in">Math</span>.ceil((max - min) / size);</span><br><span class="line">    <span class="keyword">var</span> buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(bucketCount);</span><br><span class="line">    <span class="comment">//创建小桶</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        buckets[i] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将数据添分别加到小桶中</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        buckets[<span class="built_in">Math</span>.floor((arr[i] - min) / size)].push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    arr.length = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//将每个桶分别进行直接插入排序</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        insertSort(buckets[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; buckets[i].length; j++) &#123;</span><br><span class="line">            arr.push(buckets[i][j])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j--) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基数排序-Radix-Sort"><a href="#基数排序-Radix-Sort" class="headerlink" title="基数排序(Radix Sort)"></a>基数排序(Radix Sort)</h2><p>基数排序基本原理就是将数据从个位，十位，百位分别进行比较，最后得出结果</p><p><strong>基数排序思路</strong></p><ol><li>确定目标数组中最大元素的位数</li><li>初始化一个空数组用来存放每次按各个位数排好序的元素</li><li>分别对各个位数进行排序</li></ol><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">radixSort</span>(<span class="params">arr, maxDigit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = [], mod = <span class="number">10</span>, dev = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//每次循环改变基数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, mod *= <span class="number">10</span>, dev *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="comment">//确定每个元素的位置</span></span><br><span class="line">            <span class="keyword">var</span> bucket = <span class="built_in">parseInt</span>((arr[j] % mod) / dev);</span><br><span class="line">            <span class="keyword">if</span> (counter[bucket] == <span class="literal">null</span>) &#123;</span><br><span class="line">                counter[bucket] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            counter[bucket].push(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; counter.length; j++) &#123;</span><br><span class="line">            <span class="comment">//将之前确定好位置的的元素添加到目标数组中</span></span><br><span class="line">            <span class="keyword">var</span> value = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (counter[j] != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> ((value = counter[j].shift()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    arr[index++] = value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(radixSort(arr, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="堆排序-Heap-Sort"><a href="#堆排序-Heap-Sort" class="headerlink" title="堆排序(Heap Sort)"></a>堆排序(Heap Sort)</h2><p>堆排序是利用堆这种数据结构所设计的一种排序算法。</p><p>大顶堆：每个节点的值都大于等于其子节点的值</p><p>小顶堆：每个节点的值都小于等于其子节点的值</p><p><strong>堆排序思路</strong></p><ol><li>根据大顶堆的数据结构创建大顶堆</li><li>当创建好大顶堆之后，将根节点与最小子节点交换</li><li>进行堆调整，将堆结构在调整为大顶堆</li><li>重复二三步骤直到排好序</li></ol><p><strong>代码演示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> len; <span class="comment">//声明全局变量记录数组长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildMaxHeap</span>(<span class="params">arr</span>) </span>&#123; <span class="comment">//创建大顶堆</span></span><br><span class="line">    len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆调整，将堆</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapify</span>(<span class="params">arr, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">2</span> * i + <span class="number">1</span>,</span><br><span class="line">        right = <span class="number">2</span> * i + <span class="number">2</span>,</span><br><span class="line">        largest = i;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        swap(arr, i, largest);</span><br><span class="line">        heapify(arr, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换两个变量的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    buildMaxHeap(arr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        swap(arr, <span class="number">0</span>, i);</span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;排序算法，就是如何使得记录按照要求排列的方法。排序算法在很多领域得到相当地重视，尤其是在大量数据的处理方面。一个优秀的算法可以节省大量的资源。在各个领域中考虑到数据的各种限制和规范，要得到一个符合实际的优秀算法，得经过大量的推理和分析。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.wangtianliang.cn/categories/javascript/"/>
    
      <category term="算法" scheme="http://www.wangtianliang.cn/categories/javascript/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序算法" scheme="http://www.wangtianliang.cn/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>sass教程</title>
    <link href="http://www.wangtianliang.cn/2018/12/19/sass%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.wangtianliang.cn/2018/12/19/sass的使用/</id>
    <published>2018-12-19T02:24:07.000Z</published>
    <updated>2018-12-25T07:22:11.987Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>sass有两种语法，一种是缩进式最开始的后缀名为.sass; </p><p>在sass3.0以后介绍了一种新的语法Sassy Css 是现在比较常用的后缀为.scss</p></blockquote><a id="more"></a><h2 id="安装sass"><a href="#安装sass" class="headerlink" title="安装sass"></a>安装sass</h2><p>因为sass是基于ruby环境的，所以安装sass要先安装ruby</p><p>ruby可以在官网下载也可以百度网盘</p><p>当你下载好ruby后再命令行输入<code>ruby -v</code>如果出现版本号就表示安装成功了</p><p>安装好ruby后在命令行输入<code>gem install sass</code>安装sass，在这里要注意的是 ruby 安装sass可能速度会很慢因为需要外网！！！(可以百度改变ruby的默认静态资源链接)</p><h2 id="sass命令"><a href="#sass命令" class="headerlink" title="sass命令"></a>sass命令</h2><ul><li>sass实时监视css：sass –watch sass文件：css文件</li><li>sass –watch sass文件：css文件 –style compact //css样式紧凑模式</li></ul><h2 id="sass输出css格式"><a href="#sass输出css格式" class="headerlink" title="sass输出css格式"></a>sass输出css格式</h2><ul><li>nested        嵌套</li><li>compact     紧凑</li><li>expanded    扩展</li><li>compressed    压缩    </li></ul><h1 id="scss语法"><a href="#scss语法" class="headerlink" title="scss语法"></a>scss语法</h1><blockquote><p>所有的代码上半部分都是sass，下半部分是对应解析成css的格式</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>$符号设置变量，变量名中间可以有下划线也可以有 - 连字符，变量可以套用变量</p></blockquote><h2 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">---------sass----------</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    size: <span class="number">12px</span>;</span><br><span class="line">    family: <span class="string">"Arial Black"</span>;</span><br><span class="line">    weight: <span class="number">400</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>&#123;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Arial Black"</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---------sass----------</span><br><span class="line">@<span class="keyword">mixin</span> alert &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> alert;</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带参数的mixin"><a href="#带参数的mixin" class="headerlink" title="带参数的mixin"></a>带参数的mixin</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">---------sass----------</span><br><span class="line">@<span class="keyword">mixin</span> alert(<span class="variable">$text-color</span>, <span class="variable">$text-size</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$text-color</span>;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$text-size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-warning</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> alert(<span class="number">#333</span>, 16px)</span><br><span class="line">&#125;</span><br><span class="line">//也可以指定参数的值，这样顺序就不重要了</span><br><span class="line">.alert-info &#123;</span><br><span class="line">  @<span class="keyword">include</span> alert(<span class="variable">$text-size</span>:<span class="number">12px</span>, <span class="variable">$text-color</span>:<span class="number">#666</span>)</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line">.alert-warning &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-warning</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.alert-info</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-info</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//extend继承，会继承所指定选择器的样式，也可以继承其子元素的样式。</span></span><br><span class="line"><span class="comment">//以并集选择器的方式呈现</span></span><br><span class="line">---------sass----------</span><br><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-info</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .alert;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="selector-class">.alert</span>, <span class="selector-class">.alert-info</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.alert</span> <span class="selector-tag">a</span>, <span class="selector-class">.alert-info</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.alert-info</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Partials与-import"><a href="#Partials与-import" class="headerlink" title="Partials与@import"></a>Partials与@import</h2><p>CSS自身就带一个导入功能@import可以在一个css文件中将其他css文件包含，但是每使用一次浏览器就会发出一个http请求去下载被导入的文件。scss扩展了这个功能，将scss文件分成一个个小部分每一个小部分就叫Partials</p><p><strong>Partials</strong>可以将scss 模块化并且编译成一个css文件</p><blockquote><p>将scss文件名以下划线开头 _common.scss；这样css就不会解析</p><p>在需要引入的scss文件中直接写<code>@import&quot;common&quot;</code>不用写下划线和后缀名</p></blockquote><h2 id="adjust-hue"><a href="#adjust-hue" class="headerlink" title="adjust_hue"></a>adjust_hue</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//adjust_hue可以改变颜色的值</span></span><br><span class="line">---------sass----------</span><br><span class="line"><span class="variable">$base-color</span> : <span class="number">#ff0000</span>;</span><br><span class="line"><span class="variable">$base-color-hsl</span> : hsl(<span class="number">0</span>, <span class="number">100</span>, <span class="number">50%</span>);</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: adjust_hue(<span class="variable">$base-color</span>, <span class="number">130deg</span>);</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#00ff2b</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lighten-amp-darken"><a href="#lighten-amp-darken" class="headerlink" title="lighten&amp;darken"></a>lighten&amp;darken</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lighten&amp;darken可以改变夜色的明度Lightness</span><br><span class="line">---------sass----------</span><br><span class="line"><span class="variable">$base-color</span> : hsl(<span class="number">222</span>, <span class="number">100%</span>, <span class="number">50%</span>);</span><br><span class="line"><span class="variable">$light-color</span> : lighten(<span class="variable">$base-color</span>, <span class="number">30%</span>);<span class="comment">//会把颜色变亮30%</span></span><br><span class="line"><span class="variable">$dark-color</span> : darken(<span class="variable">$base-color</span>, <span class="number">20%</span>);<span class="comment">//会把颜色变暗20%</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$base-color</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$light-color</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$dark-color</span>;</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#004dff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#99b8ff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#002e99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="saturate-amp-desaturate"><a href="#saturate-amp-desaturate" class="headerlink" title="saturate&amp;desaturate"></a>saturate&amp;desaturate</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">saturate&amp;desaturate可以改变颜色的饱和度Saturation</span><br><span class="line">---------sass----------</span><br><span class="line"><span class="variable">$base-color</span> : hsl(<span class="number">222</span>, <span class="number">50%</span>, <span class="number">50%</span>);</span><br><span class="line"><span class="variable">$saturate-color</span> : saturate(<span class="variable">$base-color</span>, <span class="number">50%</span>);<span class="comment">//饱和度增加50%</span></span><br><span class="line"><span class="variable">$desaturate-color</span> : desaturate(<span class="variable">$base-color</span>, <span class="number">30%</span>);<span class="comment">//饱和度减少30%</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$saturate-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-info</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$desaturate-color</span>;</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#004dff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.alert-info</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#667599</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="interpolation"><a href="#interpolation" class="headerlink" title="interpolation"></a>interpolation</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interpolation使用#&#123;&#125;包含变量可以将其插入到指定位置</span><br><span class="line">---------sass----------</span><br><span class="line"><span class="variable">$version</span> : <span class="string">"1.1.1"</span>;</span><br><span class="line"><span class="comment">/*当前版本是#&#123;$version&#125;*/</span></span><br><span class="line"><span class="variable">$name</span> : <span class="string">"info"</span>;</span><br><span class="line"><span class="variable">$attr</span> : <span class="string">"border"</span>;</span><br><span class="line"><span class="selector-class">.alert-</span>#&#123;<span class="variable">$name</span>&#125; &#123;</span><br><span class="line">  #&#123;<span class="variable">$attr</span>&#125;-<span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="comment">/*当前版本是1.1.1*/</span></span><br><span class="line"><span class="selector-class">.alert-info</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if条件语句"><a href="#if条件语句" class="headerlink" title="@if条件语句"></a>@if条件语句</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">语法：@<span class="keyword">if</span> 条件</span><br><span class="line">    @<span class="keyword">else</span> if 条件</span><br><span class="line">    @<span class="keyword">else</span></span><br><span class="line">---------sass----------</span><br><span class="line"><span class="variable">$theme</span> : <span class="string">"light"</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$theme</span> == dark &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;@<span class="keyword">else</span> if <span class="variable">$theme</span> == light &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;@<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="@for循环语句"></a>@for循环语句</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">语法：@<span class="keyword">for</span> <span class="variable">$var</span> from &lt;开始值&gt; through &lt;结束值&gt; &#123;……&#125;</span><br><span class="line">through也可以换成to</span><br><span class="line">through包含结束值，to不包含</span><br><span class="line">---------sass----------</span><br><span class="line"><span class="variable">$columns</span> : <span class="number">4</span>;</span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through <span class="variable">$columns</span> &#123;</span><br><span class="line">  <span class="selector-class">.col-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> / <span class="variable">$columns</span> * <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="selector-class">.col-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="each-循环列表"><a href="#each-循环列表" class="headerlink" title="@each(循环列表)"></a>@each(循环列表)</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">语法：@<span class="keyword">each</span> <span class="variable">$var</span> in <span class="variable">$list</span> &#123;……&#125;</span><br><span class="line">---------sass----------</span><br><span class="line"><span class="variable">$icons</span>: success error warning;</span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$value</span> in <span class="variable">$icons</span> &#123;</span><br><span class="line">  <span class="selector-class">.icon-</span>#&#123;<span class="variable">$value</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(../images/#&#123;<span class="variable">$value</span>&#125;.png);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="selector-class">.icon-success</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(../images/success.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-error</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(../images/error.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-warning</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(../images/warning.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">语法：@<span class="keyword">while</span> 条件 &#123;……&#125;</span><br><span class="line">---------sass----------</span><br><span class="line"><span class="variable">$i</span> : <span class="number">6</span>;</span><br><span class="line">@<span class="keyword">while</span> <span class="variable">$i</span> &gt; 0 &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5px</span> * <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$i</span> : <span class="variable">$i</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="selector-class">.item-6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="function"><a href="#function" class="headerlink" title="@function"></a>@function</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法：@function 名称 (参数<span class="number">1</span>，参数<span class="number">2</span>) &#123;……&#125;</span><br><span class="line">---------sass----------</span><br><span class="line"><span class="variable">$colors</span> : (light : <span class="number">#fff</span>, dark : <span class="number">#000</span>);</span><br><span class="line">@function color(<span class="variable">$key</span>) &#123;</span><br><span class="line">  @return map_get(<span class="variable">$colors</span>, <span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: color(light);</span><br><span class="line">&#125;</span><br><span class="line">---------css----------</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="webstorm配置scss自动编译"><a href="#webstorm配置scss自动编译" class="headerlink" title="webstorm配置scss自动编译"></a>webstorm配置scss自动编译</h1><p>webstorm是非常强大的，已经内置了scss自动编译功能只要你去设置文件路径即可</p><ol><li><p>点击 File =&gt; Settings =&gt; Tools =&gt; File Watchers</p></li><li><p>点击右上角的加号，选择scss文件</p></li><li><p>在弹出的对话框 Program 这一项里写入你sass安装路径如<code>D:\WTL\ruby\Ruby25-x64\bin\scss.bat</code>到了这一步已经可以完成自动编译了，不过默认生成的css文件和scss是同级的</p></li><li><p>如果你想让生成的css文件在你的css文件夹下要在第三步弹出的对话框中有一个 <strong>Arguments</strong>选项 填入            –no-cache –update –sourcemap –watch  \$FileName\$:\$FileParentDir\$\css\\$FileNameWithoutExtension$.css</p></li><li><p>注意,\$FileName\$后面有个冒号,然后\$FileParentDir$表示的是<strong>scss文件所在的文件夹的父级文件夹</strong>,而不是scss文件的父文件夹.</p><p>举个例子,我的项目叫lianxi,里面有个sass文件夹,里面存放scss文件,那么按照这样配置的结果,<a href="http://www.scss所在的文件夹就是sass,sass的父文件夹就是lianxi,然后找到lianxi下的css文件夹,编译后的www.css文件就会在这里" target="_blank" rel="noopener">www.scss所在的文件夹就是sass,sass的父文件夹就是lianxi,然后找到lianxi下的css文件夹,编译后的www.css文件就会在这里</a>.</p><p>如图：</p><p><img src="https://upload-images.jianshu.io/upload_images/4291575-ce2de0b923ff45db.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/190/format/webp" alt=""></p></li><li><p>如果想要改变输出模式在<strong>Arguments</strong>选项最后面加上 –style (你想输出的模式)</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;sass有两种语法，一种是缩进式最开始的后缀名为.sass; &lt;/p&gt;
&lt;p&gt;在sass3.0以后介绍了一种新的语法Sassy Css 是现在比较常用的后缀为.scss&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端技能" scheme="http://www.wangtianliang.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="scss" scheme="http://www.wangtianliang.cn/tags/scss/"/>
    
      <category term="快速编写css" scheme="http://www.wangtianliang.cn/tags/%E5%BF%AB%E9%80%9F%E7%BC%96%E5%86%99css/"/>
    
  </entry>
  
  <entry>
    <title>JS数组及字符串操作方法</title>
    <link href="http://www.wangtianliang.cn/2018/12/05/JS%E6%95%B0%E7%BB%84%E5%8F%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <id>http://www.wangtianliang.cn/2018/12/05/JS数组及字符串操作方法/</id>
    <published>2018-12-05T13:09:19.000Z</published>
    <updated>2018-12-20T13:14:08.133Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>本篇文章主要介绍了javascript数组及字符串的常用方法</p><p>每个方法的返回值都有标注</p></blockquote><a id="more"></a><h1 id="数组操作方法"><a href="#数组操作方法" class="headerlink" title="数组操作方法"></a>数组操作方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组操作方法，其中会修改原数组的方法都会有说明</span></span><br><span class="line"><span class="comment">// 1.push(参数1，参数2。。。) 在数组后面添加一个或多个元素,返回新数组的长度 </span></span><br><span class="line"><span class="comment">// 会修改原数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="string">'pink'</span>));<span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// ['red', 'blue', 'green','pink']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.pop()无参数 只删除数组最后一个元素,返回被删除的元素</span></span><br><span class="line"><span class="comment">// 会修改原数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'haha'</span>, <span class="string">'hehe'</span>, <span class="string">'gaga'</span>, <span class="string">'kaka'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop());<span class="comment">// 'kaka'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// ["haha", "hehe", "gaga"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.unshift(参数1，参数2。。。) 在数组前面添加一个或多个元素，返回新数组的长度</span></span><br><span class="line"><span class="comment">// 会修改原数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.shift()无参数，只删除数组第一个元素，返回被删除的元素</span></span><br><span class="line"><span class="comment">// 会修改原数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.concat(数组1，数组2。。。) 合并一个或多个数组，并返回新数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.concat(arr1, arr2)); <span class="comment">//[1, 2, "a", "b", 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.slice(begin, end)截取是从开始的位置截到结束的位置 不包含自己 </span></span><br><span class="line"><span class="comment">//返回以数组形式呈现的被截取的元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'xm'</span>, <span class="string">'xh'</span>, <span class="string">'xl'</span>, <span class="string">'xh'</span>, <span class="string">'xg'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice()); <span class="comment">// 默认截取整个数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>)); <span class="comment">// 从第0个截取到最后</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// ["xh"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// ["xm", "xh", "xl", "xh", "xg"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.splice(第几个开始，要删除几个) 返回以数组形式呈现的被删除了的元素</span></span><br><span class="line"><span class="comment">// 会修改原数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>, <span class="number">1</span>));<span class="comment">// ["a"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// ["b", "c", "d", "e"]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">33</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">55</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>)); <span class="comment">//只写一个表示从这个位置开始删除一直删完</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//  [12, 33]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'一'</span>, <span class="string">'二'</span>, <span class="string">'三'</span>, <span class="string">'四'</span>, <span class="string">'五'</span>, <span class="string">'六'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)); <span class="comment">//把‘三’替换成了3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//["一", "二", 3, "四", "五", "六"]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'zhang'</span>, <span class="string">'wang'</span>, <span class="string">'li'</span>, <span class="string">'zhao'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'qian'</span>)); <span class="comment">//在wang前面添加了qian</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// ["zhang", "qian", "wang", "li", "zhao"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.indexOf查询数组元素的位置,如果该元素存在返回该元素索引值，不存在返回-1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'呵呵'</span>, <span class="string">'哈哈'</span>, <span class="string">'嘿嘿'</span>, <span class="string">'嘎嘎'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'呵呵'</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'jj'</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//9.lastindexOf 与indexOf功能一样不过是从数组最后一个开始查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.toString()把数组转化为字符串，逗号分隔每一项，返回一个字符串</span></span><br><span class="line"><span class="comment">// 注意后面的小括号不能省略</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'first'</span>, <span class="string">'second'</span>, <span class="string">'third'</span>, <span class="string">'fourth'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.toString());<span class="comment">// first,second,third,fourth</span></span><br><span class="line"><span class="comment">// 11.join('分隔符')把数组转化为字符串，用分隔符隔开，返回一个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'January'</span>,<span class="string">'Fabruary'</span>,<span class="string">'March'</span>,<span class="string">'April'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">'-'</span>));<span class="comment">//中间用-隔开的字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">''</span>));<span class="comment">//中间没有任何字符隔开的字符串，最常用</span></span><br></pre></td></tr></table></figure><h2 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串操作方法 都不会改变原来的字符串</span></span><br><span class="line"><span class="comment">// 1.indexOf查找字符位置，存在返回索引，不存在返回-1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcde'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'c'</span>));<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'q'</span>));<span class="comment">//-1</span></span><br><span class="line"><span class="comment">// 2.lastindexOf从后往前找</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.charAt(index)根据索引返回指定位置的字符 index字符串的索引 没有则返回空</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'andy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">3</span>));<span class="comment">// y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.charCodeAt(index)根据索引返回指定位置字符的ASCII码</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hellow'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.str[index] 根据索引获得指定位置字符，和数组类似</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'August'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">2</span>]);<span class="comment">// g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.concat(字符串1，字符串2。。。)合并两个或多个字符串，等效于+， +</span></span><br><span class="line">str = <span class="string">'September'</span>;</span><br><span class="line">str1 = <span class="string">'October'</span>;</span><br><span class="line">str2 = <span class="string">'November'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.concat(str1));<span class="comment">// 等于str + str1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.concat(str1,str2));<span class="comment">// 等于str + str1 + str2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.substr(start, length)从start(索引)开始，截取length个</span></span><br><span class="line"><span class="comment">// 两个值都是索引号</span></span><br><span class="line">str = <span class="string">'my-name-is-andy'</span>;<span class="comment">// 空格也算一个字符</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">1</span>));<span class="comment">//从第一个一直取到最后</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>,<span class="number">5</span>));<span class="comment">// 从第二个开始截取五个字符 -name</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr());<span class="comment">// 默认截取整个字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">7</span>,<span class="number">10</span>));<span class="comment">// 如果截取长度超过字符串只截取到字符串最后</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.slice(start, end)从start位置开始截取，截取到end位置，end截取不到，</span></span><br><span class="line"><span class="comment">// 两个值都是索引号与数组的slice方法相同</span></span><br><span class="line">str = <span class="string">'December'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">0</span>, <span class="number">3</span>));<span class="comment">// Dec</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 9.substring(start, end)与slice基本相同，但不接受负值</span></span><br><span class="line">str = <span class="string">'January'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>, <span class="number">4</span>));<span class="comment">// Janu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.replace(被替换的字符，要替换的新字符)返回新字符</span></span><br><span class="line"><span class="comment">// 如果被替换的字符不止一个需要使用字符串拼接，那么必须是相邻字符才可以拼接</span></span><br><span class="line"><span class="comment">//替换的新字符可以随意拼接</span></span><br><span class="line">str = <span class="string">'February'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">'F'</span>, <span class="string">'f'</span>));<span class="comment">// february</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">'F'</span>+<span class="string">'e'</span>,<span class="string">'h'</span>));<span class="comment">// hbruary</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">'e'</span>+<span class="string">'b'</span>+<span class="string">'r'</span>, <span class="string">'6'</span>+<span class="string">'3'</span>));<span class="comment">// F63uary</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 11.toUpperCase() 转换大写 小括号不能漏</span></span><br><span class="line">str = <span class="string">'March'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase());<span class="comment">// MARCH</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(str[<span class="number">1</span>], str[<span class="number">1</span>].toUpperCase()));<span class="comment">//MArch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 12.toLowerCase() 转换小写 小括号不能漏</span></span><br><span class="line">str = <span class="string">'ABCDE'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleLowerCase());<span class="comment">// abcde</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">'B'</span>+str[<span class="number">2</span>], str[<span class="number">3</span>].toLowerCase()));<span class="comment">// AdDE</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(str[<span class="number">1</span>]+str[<span class="number">2</span>],str[<span class="number">0</span>].toLowerCase()+str[<span class="number">3</span>].toLowerCase()));</span><br><span class="line"><span class="comment">// AadDE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 13.split切割字符串为数组</span></span><br><span class="line">str = <span class="string">'my-name-is-andy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">'-'</span>));<span class="comment">//用‘-’将字符串分隔成数组</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">''</span>));<span class="comment">// 把字符串切割成数组不用任何字符间隔</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//14.trim方法 可以去掉字符串前后的空白，不要漏掉小括号</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">' dddddsss '</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.trim());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;本篇文章主要介绍了javascript数组及字符串的常用方法&lt;/p&gt;
&lt;p&gt;每个方法的返回值都有标注&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.wangtianliang.cn/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.wangtianliang.cn/tags/javascript/"/>
    
      <category term="数组" scheme="http://www.wangtianliang.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="字符串" scheme="http://www.wangtianliang.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
</feed>
